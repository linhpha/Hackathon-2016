{
    "collab_server" : "",
    "contents" : "\n\n#Count the number of unique recipes\ncountry <- unique(recipe$V1)\ncountry <- as.matrix(country)\ndataSubset <- data.frame()\n\n#Split data based on country\ndataSubset <- split(recipe, recipe$V1)  \n\nx <- data.frame(Country = dataSubset[[1]][1,3], Number_Recipes = nrow(dataSubset[[1]]) )\n\nfor (i in 2:39){\n  x[[i]] <- data.frame(Country = dataSubset[[i]][1,3], Number_Recipes = nrow(dataSubset[[i]]) )\n\n}\n\nx <- recipe[, -1]\nx <- x[, -1]\nView(x)\ny <- as.matrix(unique(unlist(x)))\ny\n\n\n#find the number of columns\n\ncolMax <- function(data ) {\n  colMax = 1\n  while (data[1,colMax] != \"\") {\n    colMax = colMax + 1\n  }\n  colMax - 1\n}\n\n\n\napplyFunction <- function(data){\n  z <- data.frame(country = data[1, 2], id = data[1, 1], ingredient = as.character(data[1, c(3:colMax(data[1,]))])) \n  for( i in 2 : nrow(data)) {\n    a <- data.frame(country = data[i, 2], id = data[i, 1], ingredient = as.character(data[i, c(3:colMax(data[i,]))]))\n    z <- rbind(z,a)\n  }\n  z\n}\n\n\n#Clean NA\nfor(i in 1: 40) {\ndataSubset[[i]][is.na(dataSubset[[i]])] <- \"\"\n}\n\ndataSubset[[1]]$V32 <- \"\"\n\n\n#Code to create a list of data frame of ID and ingredients\nout <- list()\nfor( i in 2: 40){\n  out[[i]] <- applyFunction(dataSubset[[i]])\n}\n\nn <- out\nfor (i in 1: 40) {\n  names(n[[i]]) <- n[[i]][1, 2] \n}\n\nnames(n) <- dataSubset[[2]][1,1]\nfor (i in 1: 40) {\n  names(out[[i]]) <- names(dataSubset[[i]])\n}\n\nfun1 <- applyFunction(dataSubset[[1]][1:5000,])\nfun2 <- applyFunction(dataSubset[[1]][5001:10000,])\nfun3 <- applyFunction(dataSubset[[1]][10001:15000,])\nfun4 <- applyFunction(dataSubset[[1]][15001:16000,])\nfun5 <- applyFunction(dataSubset[[1]][16001:17000,])\nfun6 <- applyFunction(dataSubset[[1]][17001:18000,])\nfun7 <- applyFunction(dataSubset[[1]][18001:19000,])\n\nfun8 <- applyFunction(dataSubset[[1]][19001:25000,])\nfun9 <- applyFunction(dataSubset[[1]][25001:30000,])\nfun10 <- applyFunction(dataSubset[[1]][30001:35162,])\n\napplyFunction(dataSubset[[2]])\n\n\n#Merge 2 subset into each other\ncombo <- list()\nfor(i in 2:40){\n  combo[[i]] <- subset(merge(out[[i]], out[[i]], by.x = \"id\", by.y = \"id\"), ingredient.x != ingredient.y)\n}\ncombo[[1]] <- subset(merge(out[[1]], out[[1]], by.x = \"id\", by.y = \"id\"), ingredient.x != ingredient.y)\n\n\n#Calculate frequency\nedgelist <- list()\nfor(i in 1:40) {\n  edgelist[[i]] <- aggregate(id~., combo[[i]], function(x)length(unique(x)))\n}\n\n\n#Trang's code \ncombo[[i]] <- subset(merge(oitem1[[i]][oitem1[[i]]$button_name %!in% c('Water','No Drink','No Dressing'),c(\"button_name\",\"order_id\",\"type\")],\n                           oitem1[[i]][oitem1[[i]]$button_name %!in% c('Water','No Drink','No Dressing'),c(\"button_name\",\"order_id\",\"type\")],\n                           by.x = \"order_id\", by.y = \"order_id\"),\n                     button_name.x != button_name.y & type.x != type.y)\n\ncombo_edgelist[[2]]$source_support <- mapply(function(x) round(x/totalorder*100,5),combo_edgelist[[2]]$source_order)\ncombo_edgelist[[2]]$target_support <- mapply(function(x) round(x/totalorder*100,5),combo_edgelist[[2]]$target_order)\ncombo_edgelist[[2]]$confidence <- mapply(function(x,y) round(x/y*100,5), \n                                         combo_edgelist[[2]]$Weight,combo_edgelist[[2]]$source_order)\ncombo_edgelist[[2]]$lift <- mapply(function(x,y) x/y,\n                                   combo_edgelist[[2]]$confidence, combo_edgelist[[2]]$target_support)\n\n\n\n#Write csv\n\nfor (i in seq_along(data)) {\n  filename = paste(i, \".csv\")\n  write.csv(data[[i]], filename)\n}\n\n\n\n",
    "created" : 1477088125088.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "721696070",
    "id" : "8B55EDE9",
    "lastKnownWriteTime" : 1476039074,
    "last_content_update" : 1476039074,
    "path" : "~/Hackathon/Code_10.8.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}