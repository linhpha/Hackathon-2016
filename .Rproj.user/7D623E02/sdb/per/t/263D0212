{
    "collab_server" : "",
    "contents" : "library(shiny)\nrequire(visNetwork)\nrequire(igraph)\nlibrary(reshape2)\nlibrary(plotly)\n\n### Prepare Data Input\n# data: binding2, attributes (prop.attributes), categoryProp\nattributes <- read.csv(\"data/attributes.csv\", stringsAsFactors = F)\nattributes <- attributes[-1]\nbinding2 <- read.csv(\"data/binding2.csv\", stringsAsFactors = F)\nbinding2 <- binding2[-1]\ncountry <- colnames(attributes)[3:length(attributes)]\ncategory.Prop <- read.csv(\"data/category.Prop.csv\", stringsAsFactors = F)\ncategory.Prop <- category.Prop[-1]\nNum <- read.csv(\"data/Number-of-recipes.csv\", stringsAsFactors=FALSE)\nNum <- Num[, 2:3]\n\nshinyServer(function(input, output) {\n  \n    #Subseting data in response to input\n    dataInput <- reactive({\n      subset(binding2, is.na(binding2[,c(input$cuisine)]) == 0)[,c(\"ingredient.x\",\"ingredient.y\",input$cuisine)]\n    })\n    output$network <- renderVisNetwork({\n    #Create nodes with id, label, and group\n      nodes <- data.frame(id=attributes$Ingredients,\n                        label=attributes$Ingredients,\n                        group = attributes$Category,\n                        size = attributes[,c(input$cuisine)]*250,\n                        stringsAsFactors = F)\n      nodes <- nodes[nodes$size >= quantile(nodes$size,.5),]\n    #Create links with from, to, foo\n      links <- dataInput() \n      colnames(links) <- c(\"from\",\"to\",\"foo\")\n      links <- links[links$foo >= quantile(links$foo,.90),] #only use 75% of the edges\n      links$value <- links$foo*100\n      nodes$label.cex <- (nodes$size >= quantile(nodes$size,.70))*(nodes$size)^2\n      visNetwork(nodes, links, directed = F) %>%\n        visInteraction(dragNodes = TRUE,\n                       dragView = TRUE,\n                       zoomView = TRUE,\n                       hideEdgesOnDrag = F) %>% \n        visPhysics(solver = \"repulsion\", \n                   repulsion = list(centralGravity = 0.1, springConstant =.01),\n                                           \n                   stabilization = list(enabled = T, \n                                        iterations = 50)) %>%\n        visOptions(\n          highlightNearest = list(enabled = T,\n                                  degree = 2),\n          selectedBy = \"group\"\n        ) %>%\n        visLayout(randomSeed = 123,\n                  improvedLayout = T) %>%\n        visNodes(shape = \"dot\", \n                 color = list(hover = \"red\"),\n                 scaling = list(label = list(enabled = T)),\n                 font = list(size = 30)) %>%\n        visEdges(\n          color = list(highlight = \"red\"),\n          smooth = list(type = \"curvedCCW\")) %>%\n        \n        visGroups(groupname = unique(category.Prop$Ingredients)[1], color = \"6A3D9A\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[2], color = \"CAB2D6\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[3], color = \"A6CEE3\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[4], color =  \"FF7F00\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[5], color = \"FDBF6F\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[6], color = \"E31A1C\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[7], color = \"FB9A99\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[8], color = \"33A02C\") %>%\n        visGroups(groupname = unique(category.Prop$Ingredients)[9], color = \"B2DF8A\") %>%\n        \n        visEvents(\n            type = \"once\", \n            startStabilizing = \"function() {\n                this.moveTo({scale:0.2})}\")\n      })\n    \n    # output$category <- renderPlotly({\n    #   plot_ly(x = category.Prop[,c(input$cuisine)], y = category.Prop[,1], yaxis = order(category.Prop[,1]),\n    #           xaxis= c(0,.5,1,1.5,2,2.5,3,3.5,4,4.5,5), type = 'bar', orientation = 'h',\n    #           marker = list(color = c(\"6A3D9A\", \"CAB2D6\",\"A6CEE3\",\"FF7F00\",\"FDBF6F\",\"E31A1C\",\"FB9A99\",\"33A02C\",\"B2DF8A\"),\n    #                         width = 0.5)) %>%\n    #     layout(margin = list(l = 80, r = 10, t = 50, b = 50)) %>%\n    #     add_annotations(xref = 'x1', yref = 'y',\n    #                     x = category.Prop[,c(input$cuisine)],  y = category.Prop[,1], \n    #                     text = paste(\"       \" ,mapply(round, category.Prop[,c(input$cuisine)],2)),\n    #                     font = list(family = 'Cambria', size = 12, color = 'rgb(50, 171, 96)'),\n    #                     \n    #                     showarrow = FALSE)\n    # })\n    {\n      \n      output$text1 <- renderText({ \n          paste(\n                input$cuisine, \" had\", Num[which(Num[,1] == input$cuisine), 2], \" recipes\" )\n      })\n      \n    }\n      \n}\n)\n",
    "created" : 1477087232623.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2299246586",
    "id" : "263D0212",
    "lastKnownWriteTime" : 1477087259,
    "last_content_update" : 1477089149501,
    "path" : "C:/Users/Linh/Desktop/foodrecipe/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}